plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'   //jacoco plugin
	id "org.sonarqube" version "3.4.0.2513" //sonar
}


group = 'com.bns.gh'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17' 

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jar{
	archiveClassifier=''
	enabled = false
}

sonarqube {
  properties {
    property "sonar.projectKey", "mavt19_spring-gh-actions"
    property "sonar.organization", "private-key-mavt19"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport  
}


jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport{                 //configuration for report formats.
	dependsOn test
	
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "com/bns/gh/models/**",
                "com/bns/gh/SpringGhActionsApplication**"
            ])
        }))
    }	
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}
	finalizedBy jacocoTestCoverageVerification  //run right after jacocoTestReport
}
jacocoTestCoverageVerification {   //Verifies the code coverage rule if enabled.
	violationRules {
		rule {
			enabled = true
			limit {
				minimum = 0.55
			}
		}
	}
}
